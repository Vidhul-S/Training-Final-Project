services:
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    restart: always
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  mongodb-product:
    image: 'mongo:latest'
    restart: always
    environment:
      - 'MONGO_INITDB_DATABASE=product_db'
      - 'MONGO_INITDB_ROOT_PASSWORD=root'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - "27018:27017"
    volumes:
      - './volume-data/mongo_data:/data/db'
    entrypoint: ["/bin/bash", "-c", "chown -R mongodb:mongodb /data/db && chmod -R 775 /data/db && exec docker-entrypoint.sh mongod"]

  mysql-order:
    image: 'mysql:latest'
    environment:
      - 'MYSQL_DATABASE=order_db'
      - 'MYSQL_ROOT_PASSWORD=root'
    volumes:
      - './volume-data/mongo_data:/data/db'
    ports:
      - "3307:3306"

  mysql-inventory:
    image: 'mysql:latest'
    environment:
      - 'MYSQL_DATABASE=inventory_db'
      - 'MYSQL_ROOT_PASSWORD=root'
    ports:
      - "3308:3306"
    volumes:
      - './volume-data/mongo_data:/data/db'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
       KAFKA_BROKER_ID: 1
       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092, PLAINTEXT_HOST://localhost:9092
       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    depends_on:
      - kafka
    restart: "no"
    entrypoint: [ "bash", "-c" ]
    command:
      - |
        echo "Waiting for Kafka to be ready...";
        sleep 10;
        kafka-topics --create --topic order-notif --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1;
        kafka-topics --create --topic product-notif --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1;
        kafka-topics --create --topic inventory-notif --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1;
        echo "Topics created successfully!";
  

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8091:8080"

  loki:
    image: grafana/loki:main
    command: [ '-config.file=/etc/loki/local-config.yaml' ]
    ports:
      - '3100:3100'

  prometheus:
    image: prom/prometheus:v2.46.0
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - '9090:9090'

  tempo:
    image: grafana/tempo:2.2.2
    command: [ '-config.file=/etc/tempo.yaml' ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - '3110:3100' # Tempo
      - '9411:9411' # zipkin

  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - '3000:3000'